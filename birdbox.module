<?php

/**
 * @file
 * Allows Twitter users to tweet directly from within your Drupal website.
 */

/**
 * Implementation of hook_menu().
 */
function birdbox_menu() {
  $items = array();
  $items['admin/config/services/birdbox'] = array(
    'title' => 'Birdbox',
    'description' => 'Settings for posting tweets with Birdbox.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('birdbox_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'birdbox.admin.inc',
  );
  $items['birdbox/oauth'] = array(
    'title' => 'Birdbox OAuth',
    'page callback' => 'birdbox_oauth_page',
    'access callback' => TRUE, 
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block_info().
 */
function birdbox_block_info() {
  $blocks = array();
  $blocks['tweet'] = array(
    'info' => t('Birdbox'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function birdbox_block_view($delta = '') {
  $block = array();
  if ($delta == 'tweet') {
    $block['subject'] = t('Birdbox');
    $block['content'] = drupal_get_form('birdbox_tweet_form');
  }
  return $block;
}

/**
 * Form for tweeting.
 */
function birdbox_tweet_form($form_state) {
  
  // If we don't have a configured Twitter consumer key and secret, we won't show the form.
  $key = variable_get('birdbox_consumer_key', '');
  $secret = variable_get('birdbox_consumer_secret', '');
  if ($key == '' || $secret == '') {
    drupal_set_message(
      t('Please <a href="@configure-url">configure</a> your Twitter consumer key and secret.', 
        array(
          '!configure-url' => url('admin/config/services/birdbox'),
        )
      ), 
      'error');
    return NULL;
  }
  
  // Consumer key and secret are okay, let's see that form!
  $form = array();

  // If we are after an attemption, and something went wrong, show an error message.
  if (isset($_GET['birdbox_status']) && $_GET['birdbox_status'] == 'fail') {
    $form['error_message'] = array(
      '#type' => 'markup',
      '#prefix' => '<div id="birdbox-error-message" class="messages error">',
      '#markup' => check_plain(
        variable_get('birdbox_error_message', t('Oops, something went wrong. Please try again.'))),
      '#suffix' => '</div>',
    );
  }

  // If we are after a successfull tweeting, show the success message.
  if (isset($_GET['birdbox_status']) && $_GET['birdbox_status'] == 'success') {
    $success_message = variable_get('birdbox_success_message');
    $message = (is_array($success_message) && isset($success_message['value'])) ?
      $success_message['value'] : t('Thank you!');
    $format = (is_array($success_message) && !empty($success_message['format'])) ?
      $success_message['format'] : filter_default_format();
    $form['success_message'] = array(
      '#type' => 'markup',
      '#prefix' => '<div id="birdbox-success-message">',
      '#markup' => check_markup($message, $format), 
      '#suffix' => '</div>',
    );
    // If we don't have to show the tweet form after a successfull tweeting, return now.
    if (!variable_get('birdbox_show_tweet_form_after_success', TRUE)) {
      return $form;
    }
  }

  $form['tweet_description'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="birdbox-description">',
    '#markup' => check_plain(variable_get('birdbox_tweet_description')),
    '#suffix' => '</div>',
  );
  $form['tweet_text'] = array(
    '#type' => 'textarea',
    '#default_value' => variable_get('birdbox_default_text_to_tweet', ''),
    '#rows' => 2,
    '#resizable' => FALSE,
    '#required' => TRUE,
    '#maxlength' => 140,
    '#maxlength_js' => TRUE,
  );
  $form['tweet_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Tweet'),
  );
  return $form;
}

/**
 * Submit handler for the tweet form.
 */
function birdbox_tweet_form_submit($form, &$form_state) {
  // Check wether the user already authorized our app.
  if (isset($_SESSION['birdbox_oauth']['access_tokens'])) {
    // In this case we do not have to authorize us again, we can tweet right now.
    module_load_include('lib.php', 'oauth_common');
    module_load_include('lib.php', 'birdbox', 'lib/twitter');
    birdbox_post_tweet($form_state['values']['tweet_text']);
    $form_state['redirect'] = array(variable_get('birdbox_redirect_path', 'node'), 
      array('query' => array('birdbox_status' => 'success'), 'fragment' => 'block-birdbox-tweet'));
  }
  else {
    $_SESSION['birdbox_oauth']['tweet'] = $form_state['values']['tweet_text'];
    // Go for the authorization.
    birdbox_tweet_authorize();
  }
}

/**
 * Authorization request for Twitter.
 */
function birdbox_tweet_authorize() {
  module_load_include('lib.php', 'oauth_common');
  module_load_include('lib.php', 'birdbox', 'lib/twitter');

  $twitter = new TwitterOAuth(variable_get('birdbox_consumer_key'), variable_get('birdbox_consumer_secret'));
  $token = $twitter->get_request_token();

  $_SESSION['birdbox_oauth']['token'] = $token;
  drupal_goto($twitter->get_authorize_url($token));
}

/**
 * Handle the OAuth callback from Twitter.
 */
function birdbox_oauth_page() {
  
  if (!birdbox_oauth_validate()) {
    drupal_goto(variable_get('birdbox_redirect_path', 'node'), 
      array('query' => array('birdbox_status' => 'fail'), 'fragment' => 'block-birdbox-tweet'));
  }

  module_load_include('lib.php', 'oauth_common');
  module_load_include('lib.php', 'birdbox', 'lib/twitter');

  $token = $_SESSION['birdbox_oauth']['token'];
  $twitter = new TwitterOAuth(
    variable_get('birdbox_consumer_key'),
    variable_get('birdbox_consumer_secret'),
    $token['oauth_token'], 
    $token['oauth_token_secret']
  );
  
  if ($twitter) {
    $response = $twitter->get_access_token();
    if (is_array($response) && isset($response['oauth_token']) && isset($response['oauth_token_secret'])) {
      birdbox_post_tweet($_SESSION['birdbox_oauth']['tweet'], $response['oauth_token'], $response['oauth_token_secret']);

      $_SESSION['birdbox_oauth']['access_tokens']['oauth_token'] = $response['oauth_token'];
      $_SESSION['birdbox_oauth']['access_tokens']['oauth_token_secret'] = $response['oauth_token_secret'];

      drupal_goto(variable_get('birdbox_redirect_path', 'node'), 
        array('query' => array('birdbox_status' => 'success'), 'fragment' => 'block-birdbox-tweet'));
    }
    else {
      watchdog('birdbox', 'Invalid Twitter OAuth request.', 'WATCHDOG_ERROR');
      drupal_goto(variable_get('birdbox_redirect_path', 'node'), 
        array('query' => array('birdbox_status' => 'fail'), 'fragment' => 'block-birdbox-tweet'));
    }
  }
  else {
    watchdog('birdbox', 'Invalid Twitter OAuth request.', 'WATCHDOG_ERROR');
    drupal_goto(variable_get('birdbox_redirect_path', 'node'), 
      array('query' => array('birdbox_status' => 'fail'), 'fragment' => 'block-birdbox-tweet'));
  }
}

/**
 * Validate the OAuth request on the OAuth callback page.
 */
function birdbox_oauth_validate() {  
  if (!isset($_SESSION['birdbox_oauth']) || !is_array($_SESSION['birdbox_oauth']['token']) 
      || !isset($_GET['oauth_token'])) {
    watchdog('birdbox', 'Invalid Twitter OAuth request.', 'WATCHDOG_ERROR');
    return FALSE; 
  }
  if ($_SESSION['birdbox_oauth']['token']['oauth_token'] != $_GET['oauth_token']) {
    watchdog('birdbox', 'Invalid Twitter OAuth token.', 'WATCHDOG_ERROR');
    return FALSE;
  }
  return TRUE;
}

/**
 * Post a tweet to Twitter on a user's behalf.
 */
function birdbox_post_tweet($tweet_text, $oauth_token = NULL, $oauth_token_secret = NULL) {
  if (!$oauth_token && !$oauth_token_secret) {
    // The access tokens are stored in the current session.
    $oauth_token = $_SESSION['birdbox_oauth']['access_tokens']['oauth_token'];
    $oauth_token_secret = $_SESSION['birdbox_oauth']['access_tokens']['oauth_token_secret'];
  }
  
  $twitter_auth = new TwitterOAuth(
    variable_get('birdbox_consumer_key'),
    variable_get('birdbox_consumer_secret'),
    $oauth_token,
    $oauth_token_secret
  );
  $twitter_auth->status_update($tweet_text);
}

